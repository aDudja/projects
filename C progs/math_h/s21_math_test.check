#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "s21_math.h"

//! s21_abs tests

#test s21_abs_test_1
int i;
for (i = -128; i <= 127; i++) {
    ck_assert_int_eq(abs(i), s21_abs(i));
}

#test s21_abs_test_2
ck_assert_double_eq(abs(-7), s21_abs(-7));

#test s21_abs_test_3
ck_assert_double_eq(abs(-98), s21_abs(-98));

#test s21_abs_test_4
ck_assert_double_eq(abs(123), s21_abs(123));

#test s21_abs_test_5
ck_assert_double_eq(abs(10009), s21_abs(10009));

#test s21_abs_test_6
ck_assert_double_eq(abs(-10009), s21_abs(-10009));

//! s21_acos tests

#test s21_acos_test_1
ck_assert_double_eq_tol(acos(0.567), s21_acos(0.567), 1e-7);

#test s21_acos_test_2
ck_assert_double_eq_tol(acos(0.2), s21_acos(0.2), 1e-7);

#test s21_acos_test_3
ck_assert_double_eq_tol(acos(-0.2), s21_acos(-0.2), 1e-7);

#test s21_acos_test_4
ck_assert_double_eq_tol(acos(-0.567), s21_acos(-0.567), 1e-7);

//! s21_asin tests

#test s21_asin_test_1
ck_assert_double_eq_tol(asin(0.21456), s21_asin(0.21456), 1e-7);
    
#test s21_asin_test_2
ck_assert_double_eq_tol(asin(-0.21456), s21_asin(-0.21456), 1e-7);

#test s21_asin_test_3
ck_assert_double_nan(s21_asin(s21_NAN));
    
#test s21_asin_test_4
ck_assert_double_eq_tol(asin(1), s21_asin(1), 1e-7);

#test s21_asin_test_5
ck_assert_double_eq_tol(asin(-1), s21_asin(-1), 1e-7);

//! s21_atan tests

#test s21_atan_test_1
ck_assert_double_eq(atan(0.23456), s21_atan(0.23456));

#test s21_atan_test_2
for (float k = -10; k <= 10; k += 4) {
    double a = s21_atan(k);
    double b = atan(k);
    ck_assert_double_eq_tol(a, b, 1e-7);
}

#test s21_atan_test_3
ck_assert_double_eq(atan(0.0000001), s21_atan(0.0000001));

//! s21_ceil tests

#test s21_ceil_test_1
double i;
for (i = -M_PI/2; i <= M_PI/2; i+= 0.25) {
    ck_assert_double_eq(ceil(i), s21_ceil(i));
}
#test s21_ceil_test_2
ck_assert_double_eq(ceil(INFINITY), s21_ceil(s21_INFINITY));

#test s21_ceil_test_3
ck_assert_double_eq(ceil(-INFINITY), s21_ceil(-s21_INFINITY));

#test s21_ceil_test_4
ck_assert_double_nan(ceil(NAN));

#test s21_ceil_test_5
ck_assert_double_nan(s21_ceil(s21_NAN));

#test s21_ceil_test_6
ck_assert_double_eq(ceil(-7.0), s21_ceil(-7.0));

#test s21_ceil_test_7
ck_assert_double_eq(ceil(-98.1), s21_ceil(-98.1));

#test s21_ceil_test_8
ck_assert_double_eq(ceil(123.02), s21_ceil(123.02));

#test s21_ceil_test_9
ck_assert_double_eq(ceil(10009.00123), s21_ceil(10009.00123));

#test s21_ceil_test_10
ck_assert_double_eq(ceil(-10009.555), s21_ceil(-10009.555));

#test s21_ceil_test_11
ck_assert_double_eq(ceil(-0.10009), s21_ceil(-0.10009));

//! s21_cos tests

#test s21_cos_test_1
ck_assert_double_eq(cos(0.2222), s21_cos(0.2222));

#test s21_cos_test_2
ck_assert_double_nan(s21_cos(s21_NAN));

#test s21_cos_test_3
ck_assert_double_nan(s21_cos(-s21_INFINITY));

#test s21_cos_test_4
ck_assert_double_nan(s21_cos(s21_INFINITY));

#test s21_cos_test_5
ck_assert_double_eq(cos(3.3), s21_cos(3.3));

//! s21_exp tests

#test s21_exp_test_1
ck_assert_double_eq_tol(s21_exp(5), s21_exp(5), 1e-6);

#test s21_exp_test_2
ck_assert_double_eq_tol(s21_exp(5.5), s21_exp(5.5), 1e-6);

#test s21_exp_test_3
ck_assert_double_eq_tol(s21_exp(6.9), s21_exp(6.9), 1e-6);

#test s21_exp_test_4
ck_assert_double_nan(s21_exp(NAN));

#test s21_exp_test_7
ck_assert_double_eq(exp(0), s21_exp(0));

#test s21_exp_test_8
ck_assert_double_eq_tol(exp(1), s21_exp(1), 1e-6);

//! s21_fabs tests

#test s21_fabs_test_1
ck_assert_double_eq(fabs(-INFINITY), s21_fabs(-s21_INFINITY));

#test s21_fabs_test_2
ck_assert_double_nan(fabs(NAN));

#test s21_fabs_test_3
ck_assert_double_nan(s21_fabs(s21_NAN));

#test s21_fabs_test_4
ck_assert_double_eq(fabs(-7.0), s21_fabs(-7.0));

#test s21_fabs_test_5
ck_assert_double_eq(fabs(-98.1), s21_fabs(-98.1));

#test s21_fabs_test_6
ck_assert_double_eq(fabs(123.02), s21_fabs(123.02));

#test s21_fabs_test_7
ck_assert_double_eq(fabs(10009.0), s21_fabs(10009.0));

#test s21_fabs_test_8
ck_assert_double_eq(fabs(-10009.555), s21_fabs(-10009.555));

#test s21_fabs_test_9
ck_assert_double_eq(fabs(-0.10009), s21_fabs(-0.10009));

#test s21_fabs_test_10
ck_assert_double_eq(fabs(-1e23), s21_fabs(-1e23));

#test s21_exp_test_11
ck_assert_double_eq(fabs(INFINITY), s21_fabs(s21_INFINITY));

//! s21_floor tests

#test s21_floor_test_1
ck_assert_double_eq(floor(INFINITY), s21_floor(s21_INFINITY));

#test s21_floor_test_2
ck_assert_double_eq(floor(-INFINITY), s21_floor(-s21_INFINITY));

#test s21_floor_test_3
ck_assert_double_nan(floor(NAN));

#test s21_floor_test_4
ck_assert_double_nan(s21_floor(NAN));

#test s21_floor_test_5
ck_assert_int_eq(floor(-7.0), s21_floor(-7.0));

#test s21_floor_test_6
ck_assert_double_eq(floor(-98.1), s21_floor(-98.1));

#test s21_floor_test_7
ck_assert_double_eq(floor(123.02), s21_floor(123.02));

#test s21_floor_test_8
ck_assert_double_eq(floor(10009.00123), s21_floor(10009.00123));

#test s21_floor_test_9
ck_assert_double_eq(floor(-10009.555), s21_floor(-10009.555));

#test s21_floor_test_10
ck_assert_double_eq(floor(-0.10009), s21_floor(-0.10009));

#test s21_floor_test_11
ck_assert_double_eq(floor(-1e-23), s21_floor(-1e-23));

#test s21_floor_test_12
ck_assert_double_eq(floor(100091234.5), s21_floor(100091234.5));

//! s21_fmod tests

#test s21_fmod_test_1
ck_assert_double_nan(fmod(1, 0));

#test s21_fmod_test_2
ck_assert_double_nan(s21_fmod(1, 0));

#test s21_fmod_test_3
ck_assert_double_eq(fmod(0, -1), s21_fmod(0, -1));

#test s21_fmod_test_4
ck_assert_double_eq(fmod(0, 1), s21_fmod(0, 1));

#test s21_fmod_test_5
ck_assert_double_nan(fmod(INFINITY, -1));

#test s21_fmod_test_6
ck_assert_double_nan(s21_fmod(INFINITY, -1));

#test s21_fmod_test_7
ck_assert_double_eq(fmod(-1, -INFINITY), s21_fmod(-1, -s21_INFINITY));

#test s21_fmod_test_8
ck_assert_double_eq(fmod(0, INFINITY), s21_fmod(0, s21_INFINITY));

#test s21_fmod_test_9
ck_assert_double_nan(s21_fmod(0, s21_NAN));

#test s21_fmod_test_10
ck_assert_double_nan(fmod(0, NAN));

#test s21_fmod_test_11
ck_assert_double_nan(s21_fmod(s21_NAN, s21_NAN));

#test s21_fmod_test_12
ck_assert_double_nan(fmod(NAN, NAN));

#test s21_fmod_test_13
ck_assert_double_nan(s21_fmod(s21_NAN, s21_INFINITY));

#test s21_fmod_test_14
ck_assert_double_nan(s21_fmod(s21_INFINITY, s21_NAN));

#test s21_fmod_test_15
ck_assert_double_nan(s21_fmod(s21_NAN, -s21_INFINITY));

#test s21_fmod_test_16
ck_assert_double_nan(s21_fmod(-s21_INFINITY, s21_NAN));

#test s21_fmod_test_17
ck_assert_double_nan(fmod(NAN, INFINITY));

#test s21_fmod_test_18
ck_assert_double_nan(fmod(INFINITY, NAN));

#test s21_fmod_test_19
ck_assert_double_nan(fmod(NAN, -INFINITY));

#test s21_fmod_test_20
ck_assert_double_nan(fmod(-INFINITY, NAN));

#test s21_fmod_test_21
for (double a = -1500; a < 1500; a += 123) {
    for (double b = -12; b < 12; b += 1.25) {
    ck_assert_double_eq(fmod(a, b), s21_fmod(a, b));
    ck_assert_double_eq(fmod(b, a), s21_fmod(b, a));
    }
}

//! s21_log tests

#test s21_log_test_1
for (double k = 1; k < 100; k += 13.2) {
    double a = s21_log(k);
    double b = log(k);
    ck_assert_double_eq_tol(a, b, 1e-6);
}

#test s21_log_test_2
for (double k = 0.1; k < 4; k += 0.24) {
    double a = s21_log(k);
    double b = log(k);
    ck_assert_double_eq_tol(a, b, 1e-6);
}

#test s21_log_test_3
for (double k = 0.1; k < 10000; k += 123) {
    double a = s21_log(k);
    double b = log(k);
    ck_assert_double_eq_tol(a, b, 1e-6);
}

#test s21_log_test_4
for (double k = 0.000005; k < 1; k *= 5) {
    double a = s21_log(k);
    double b = log(k);
    ck_assert_double_eq_tol(a, b, 1e-6);
}

#test s21_log_test_5
ck_assert_double_nan(s21_log(s21_NAN));

#test s21_log_test_6
ck_assert_double_eq(log(0), s21_log(0));

#test s21_log_test_7
ck_assert_double_nan(s21_log(-3));

#test s21_log_test_8
ck_assert_double_eq(log(INFINITY), s21_log(s21_INFINITY));

#test s21_log_test_9
ck_assert_double_nan(s21_log(-s21_INFINITY));

#test s21_log_test_10
ck_assert_double_eq(log(1), s21_log(1));

#test s21_log_test_11
ck_assert_double_eq_tol(log(2), s21_log(2), 1e-6);

#test s21_log_test_12
ck_assert_double_nan(s21_log(-s21_INFINITY));

//! s21_pow tests

#test s21_exp_test_5
ck_assert_double_eq(exp(INFINITY), s21_exp(INFINITY));

#test s21_pow_test_16
ck_assert_double_eq(pow(INFINITY, INFINITY), s21_pow(s21_INFINITY, s21_INFINITY));

#test s21_pow_test_26
ck_assert_double_eq(pow(2, INFINITY), s21_pow(2, s21_INFINITY));

#test s21_sqrt_test_3
ck_assert_double_nan(sqrt(NAN));

#test s21_sqrt_test_4
ck_assert_double_eq(s21_sqrt(s21_INFINITY), sqrt(INFINITY));

#test s21_sqrt_test_5
ck_assert_double_nan(s21_sqrt(-s21_INFINITY));

#test s21_sqrt_test_6
ck_assert_double_nan(sqrt(-INFINITY));

#test s21_pow_test_3
ck_assert_double_eq(pow(1, 0), s21_pow(1, 0));

#test s21_pow_test_4
ck_assert_double_eq(pow(-1, 3), s21_pow(-1, 3));

#test s21_pow_test_5
ck_assert_double_eq(pow(-1, 4), s21_pow(-1, 4));

#test s21_pow_test_6
ck_assert_double_eq(pow(0, 0), s21_pow(0, 0));

#test s21_pow_test_7
ck_assert_double_eq(pow(0, -1), s21_pow(0, -1));

#test s21_pow_test_8
ck_assert_double_eq(pow(0, 1), s21_pow(0, 1));

#test s21_pow_test_9
ck_assert_double_eq(pow(INFINITY, 0), s21_pow(s21_INFINITY, 0));

#test s21_pow_test_10
ck_assert_double_eq(pow(INFINITY, -1), s21_pow(s21_INFINITY, -1));

#test s21_pow_test_13
ck_assert_double_nan(s21_pow(0, s21_NAN));

#test s21_pow_test_15
ck_assert_double_nan(s21_pow(s21_NAN, s21_NAN));

#test s21_pow_test_22
ck_assert_double_nan(s21_pow(s21_NAN, s21_INFINITY));

#test s21_pow_test_23
ck_assert_double_nan(s21_pow(s21_INFINITY, s21_NAN));

#test s21_pow_test_24
ck_assert_double_nan(s21_pow(s21_NAN, -s21_INFINITY));

#test s21_pow_test_25
ck_assert_double_nan(s21_pow(-s21_INFINITY, s21_NAN));

//! s21_sin tests

#test s21_sin_test_1
ck_assert_double_eq_tol(sin(0.123), s21_sin(0.123), EPS);
        
#test s21_sin_test_2
ck_assert_double_nan(s21_sin(s21_NAN));

#test s21_sin_test_3
ck_assert_double_nan(s21_sin(s21_INFINITY));

#test s21_sin_test_4
ck_assert_double_nan(s21_sin(-s21_INFINITY));

#test s21_sin_test_5
ck_assert_double_eq_tol(sin(3.4), s21_sin(3.4), EPS);


//! s21_sqrt tests

#test s21_sqrt_test_1
ck_assert_double_eq_tol(s21_sqrt(233), sqrt(233), 1e-6);

#test s21_sqrt_test_2
ck_assert_double_nan(s21_sqrt(s21_NAN));

#test s21_sqrt_test_7
ck_assert_double_nan(s21_sqrt(-5));

#test s21_sqrt_test_9
ck_assert_double_eq_tol(s21_sqrt(1000), sqrt(1000), 1e-7);

//! s21_tan tests

#test s21_tan_test_1
ck_assert_double_eq_tol(tan(0.123456), s21_tan(0.123456), 1e-6);

#test s21_tan_test_2
ck_assert_double_nan(s21_tan(s21_NAN));

#test s21_tan_test_3
ck_assert_double_nan(s21_tan(s21_INFINITY));

#test s21_tan_test_4
ck_assert_double_nan(s21_tan(-s21_INFINITY));
